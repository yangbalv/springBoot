抽象方法：
    抽象方法只有方法的输入输出结构和方法名，没有具体的方法体。
    实体类中不能存在抽象方法，抽象方法只能放在抽象类或者接口中。

接口：
    首先接口中方法都是抽象方法。
    一个实体类实现接口，则需要重写（实现）接口中的所有方法。
    接口中的方法默认且必须是public abstract修饰的。静态方法例外，接口中的静态方法与实体类中的静态方法一样可以直接访问。
    接口中的常量默认是且必须是public static final修饰的。
    接口也可以继承，若B继承A, 实体类在实现B是既要实现B中的方法，也要实现A中的方法。


抽象类：
    抽象类可以作为实例使用。但是在新建对象时需要重写（实现）抽象方法。
    抽象类实现接口时，在抽象类中可以不重写抽象方法。接口的抽象方法作为自己的抽象方法，在子类中进行重写。
    抽象类实现接口后重写（实现）了接口的方法，抽象类的子类不需要再重写（实现）接口的方法。即将抽象方法转为了具体方法。
    抽象类中的常量与实例方法在子类继承时可以继续使用。

关于自动注入：
    经测试，接口以及抽象类都可以被自动注入。
    自动注入的接口（或抽象类）必须唯一。
    使用@component注解用于类上，标记当前类是,加上注解会将当前类自动注入到spring容器中，不需要再在applicationContext.xml文件定义bean了。
    若是出现多个实现类都写上了注解则会报错，此时使用@Primary注解标记为实现类。
    注意@Primary只能写一个，当接口（或抽象类）被自动注入时，所有实现了这个接口的类中只能由一个写了@Primary，否则就会报错。
    此时就会自动注入，找到被层层包裹的实体类作为自动注入的实例。

