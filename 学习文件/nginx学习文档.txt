  ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/nginx.conf
标准的设置nginx的文件存放位置以及配置文件的地方
第一个代表文件存放位置，第二个代表指定配置文件，这两个配置都会创建文件，所以配置的路径相同时会出现nginx.conf已存在的问题


yum -y install openssl openssl-devel make zlib zlib-devel gcc gcc-c++ libtool    pcre pcre-devel

  location = /50x.html {
            root   html;
        }
localtion中的root代表的是文件的路径





# 工作进程数
worker_processes  1;

# 日志文件路径
error_log  logs/error.log;

# 进程运行文件路径
pid        logs/nginx.pid;


events {
	# 使用 epoll 事件驱动
	use epoll;

	# 最大连接数
    worker_connections  1024;
}


http {
	# 文件类型设置
    include       mime.types;
    default_type  application/octet-stream;

    # 日志格式
    log_format  mainFromat  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 服务日志
    access_log  logs/access.log  mainFromat;

    # 开启高效文件传输模式
    sendfile        on;

    # 配置 tcp 发送模式
    tcp_nopush     on;
    tcp_nodelay on;

	# 长连接超时时间
    keepalive_timeout  65;

    # 请求头
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;

    # 请求体
    client_body_buffer_size  128k;
    client_max_body_size  10m;

    # 设置 gzip
    gzip  on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 代理服务器相关设置
    proxy_connect_timeout  75;
    proxy_read_timeout  75;
    proxy_send_timeout  100;


    # 监听http服务
    server {

    	# 服务器端口地址
        listen       80;
        server_name  192.168.56.10;

        # 字符集
        charset utf-8;

        # 服务日志路径
        access_log  logs/host.access.log  mainFromat;

        # 地址定位模块
        location / {
            root   html;
            index  index.html index.htm index.jsp;
        }

        location /demo {
        	# 添加反向代理服务器
        	proxy_pass  http://192.168.56.10:8080;
        	proxy_redirect off;
			proxy_pass_header  Set-Cookie;
			proxy_set_header Host $host;
			proxy_set_header X-Real-Ip $remote_addr;
			proxy_set_header X-Forwarded-For $remote_addr;

			# 添加请求头
			add_header Access-Control-Allow-Origin * always;
			add_header Access-Control-Allow-Credentials 'true' always;
			add_header Access-Control-Allow-Methods 'PUT, GET, POST, DELETE, OPTIONS' always;
			add_header Access-Control-Allow-Headers * always;

			# 处理 OPTION 请求
			if ($request_method = 'OPTIONS') {
				return 204;
			}
        }

        
        # 重定向错误页到静态页
        error_page   404              /404.html;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

    # 监听https服务
    server {
        listen       443   ssl;
        server_name  192.168.56.10;

        # ssl 设置
    	ssl_certificate /opt/ssl/nginx.crt;
    	ssl_certificate_key /opt/ssl/nginx.key;
    	ssl_session_timeout 1d;
    	ssl_session_cache shared:SSL:50m;
    	ssl_session_tickets off;
    	ssl_protocols TLSv1.2;
        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;
        ssl_stapling on;
        ssl_stapling_verify on;

       location / {
           root   html;
           index  index.html index.htm;
       }
    }

    # 监听其他端口服务
    server {
       listen       8081;
       server_name  localhost;

       location / {
           root   html;
           index  index.html index.htm;
       }
    }
}
















如果没有gcc环境，需要安装gcc：
yum install gcc-c++

安装依赖
yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel

# 进入文件夹
cd  /usr/local

#下载安装包
wget http://nginx.org/download/nginx-1.18.0.tar.gz

#解压安装包
tar -xvf nginx-1.18.0.tar.gz 

#解压之后不需要重新命名直接进去解压目录
#进入nginx-1.18.0目录 
cd /usr/local/nginx-1.18.0

#执行命令
#prefix= 指向安装目录（编译安装）
#conf-path= 指向配置文件（nginx.conf）
#error-log-path= 指向错误日志目录
#pid-path= 指向pid文件（nginx.pid）
#http-log-path= 设定access log路径
#with-http_gzip_static_module 启用ngx_http_gzip_static_module支持（在线实时压缩输出数据流）
#with-http_stub_status_module 启用ngx_http_stub_status_module支持（获取nginx自上次启动以来的工作状态）
#with-http_ssl_module 启用ngx_http_ssl_module支持（使支持https请求，需已安装openssl）

./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/conf/nginx.conf  --error-log-path=/usr/local/nginx/logs/error.log --pid-path=/usr/local/nginx/logs/nginx.pid  --http-log-path=/usr/local/nginx/logs/access.log --with-http_gzip_static_module --with-http_stub_status_module --with-http_ssl_module

#执行命令
make

#执行make install命令 
make install

#启动nginx
 cd  /usr/local/nginx/sbin
./nginx

#查看nginx进程
ps -ef | grep nginx

#打开阿里云的网路安全组开放80端口

#在浏览器访问服务器ip

#设置开机自动启动
vim /lib/systemd/system/nginx.service
#按i编辑 把下面复制进去  按esc建  再按shift+：键 wq  保存退出

[Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network-online.target remote-fs.target nss-lookup.target
Wants=network-online.target
[Service]
Type=forking
#自己nginx启动的pid文件自己找到文件目录
PIDFile=/usr/local/nginx/logs/nginx.pid
#自己nginx的启动文件 
ExecStartPre=/usr/local/nginx/sbin/nginx -t
ExecStart=/usr/local/nginx/sbin/nginx
ExecReload=/usr/local/nginx/sbin/nginx -s reload
#默认
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true
[Install]
WantedBy=multi-user.target


#启动
systemctl start nginx.service

设置开机自启
systemctl enable nginx.service

#提示
Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.

#停止开机自启动
systemctl disable nginx.service

#查看服务当前状态
systemctl status nginx.service

#重新启动服务
systemctl reload nginx.service

#停止服务
systemctl stop nginx.service


